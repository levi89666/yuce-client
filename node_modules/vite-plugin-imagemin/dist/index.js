var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default
});

// node_modules/tsup/assets/cjs_shims.js
var importMetaUrlShim = typeof document === "undefined" ? new (require("url")).URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;

// src/index.ts
var import_path2 = __toModule(require("path"));
var import_vite = __toModule(require("vite"));

// src/utils.ts
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var isFunction = (arg) => typeof arg === "function";
var isBoolean = (arg) => {
  return typeof arg === "boolean";
};
var isNotFalse = (arg) => {
  return !(isBoolean(arg) && !arg);
};
var isRegExp = (arg) => Object.prototype.toString.call(arg) === "[object RegExp]";
function readAllFile(root, reg) {
  let resultArr = [];
  try {
    if (import_fs.default.existsSync(root)) {
      const stat = import_fs.default.lstatSync(root);
      if (stat.isDirectory()) {
        const files = import_fs.default.readdirSync(root);
        files.forEach(function(file) {
          const t = readAllFile(import_path.default.join(root, "/", file), reg);
          resultArr = resultArr.concat(t);
        });
      } else {
        if (reg !== void 0) {
          if (isFunction(reg.test) && reg.test(root)) {
            resultArr.push(root);
          }
        } else {
          resultArr.push(root);
        }
      }
    }
  } catch (error) {
  }
  return resultArr;
}

// src/index.ts
var import_fs_extra = __toModule(require("fs-extra"));
var import_chalk = __toModule(require("chalk"));
var import_debug = __toModule(require("debug"));
var import_imagemin = __toModule(require("imagemin"));
var import_imagemin_gifsicle = __toModule(require("imagemin-gifsicle"));
var import_imagemin_pngquant = __toModule(require("imagemin-pngquant"));
var import_imagemin_optipng = __toModule(require("imagemin-optipng"));
var import_imagemin_mozjpeg = __toModule(require("imagemin-mozjpeg"));
var import_imagemin_svgo = __toModule(require("imagemin-svgo"));
var import_imagemin_webp = __toModule(require("imagemin-webp"));
var import_imagemin_jpegtran = __toModule(require("imagemin-jpegtran"));
var debug = (0, import_debug.debug)("vite-plugin-imagemin");
var extRE = /\.(png|jpeg|gif|jpg|bmp|svg)$/i;
var mtimeCache = new Map();
var exportFn = (options = {}) => {
  let outputPath;
  let config;
  const emptyPlugin = {
    name: "vite:imagemin"
  };
  const { disable = false, filter = extRE, verbose = true } = options;
  if (disable) {
    return emptyPlugin;
  }
  debug("plugin options:", options);
  return __spreadProps(__spreadValues({}, emptyPlugin), {
    apply: "build",
    enforce: "post",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
      outputPath = import_path2.default.join(config.root, config.build.outDir);
      debug("resolvedConfig:", resolvedConfig);
    },
    async closeBundle() {
      let files = readAllFile(outputPath) || [];
      debug("files:", files);
      if (!files.length) {
        return;
      }
      files = filterFiles(files, filter);
      const tinyMap = new Map();
      const handles = files.map(async (filePath) => {
        let { mtimeMs, size: oldSize } = await import_fs_extra.default.stat(filePath);
        if (mtimeMs <= (mtimeCache.get(filePath) || 0)) {
          return;
        }
        let content = await import_fs_extra.default.readFile(filePath);
        try {
          content = await import_imagemin.default.buffer(content, {
            plugins: getImageminPlugins(options)
          });
        } catch (error) {
          config.logger.error("imagemin error:" + filePath);
        }
        const size = content.byteLength;
        tinyMap.set(filePath, {
          size: size / 1024,
          oldSize: oldSize / 1024,
          ratio: size / oldSize - 1
        });
        await import_fs_extra.default.writeFile(filePath, content);
        mtimeCache.set(filePath, Date.now());
      });
      Promise.all(handles).then(() => {
        if (verbose) {
          handleOutputLogger(config, tinyMap);
        }
      });
    }
  });
};
function handleOutputLogger(config, recordMap) {
  config.logger.info(`
${import_chalk.default.cyan("\u2728 [vite-plugin-imagemin]")}- compressed image resource successfully: `);
  const keyLengths = Array.from(recordMap.keys(), (name) => name.length);
  const valueLengths = Array.from(recordMap.values(), (value) => `${Math.floor(100 * value.ratio)}`.length);
  const maxKeyLength = Math.max(...keyLengths);
  const valueKeyLength = Math.max(...valueLengths);
  recordMap.forEach((value, name) => {
    let { ratio, size, oldSize } = value;
    const rName = (0, import_vite.normalizePath)(name).replace((0, import_vite.normalizePath)(`${config.root}/${config.build.outDir}/`), "");
    ratio = Math.floor(100 * ratio);
    const fr = `${ratio}`;
    const denseRatio = ratio > 0 ? import_chalk.default.red(`+${fr}%`) : ratio <= 0 ? import_chalk.default.green(`${fr}%`) : "";
    const sizeStr = `${oldSize.toFixed(2)}kb / tiny: ${size.toFixed(2)}kb`;
    config.logger.info(import_chalk.default.dim(config.build.outDir + "/") + import_chalk.default.blueBright(rName) + " ".repeat(2 + maxKeyLength - name.length) + import_chalk.default.gray(`${denseRatio} ${" ".repeat(valueKeyLength - fr.length)}`) + " " + import_chalk.default.dim(sizeStr));
  });
  config.logger.info("\n");
}
function filterFiles(files, filter) {
  if (filter) {
    const isRe = isRegExp(filter);
    const isFn = isFunction(filter);
    files = files.filter((file) => {
      if (isRe) {
        return filter.test(file);
      }
      if (isFn) {
        return filter(file);
      }
      return true;
    });
  }
  return files;
}
function getImageminPlugins(options = {}) {
  const {
    gifsicle = true,
    webp = false,
    mozjpeg = false,
    pngquant = false,
    optipng = true,
    svgo = true,
    jpegTran = true
  } = options;
  const plugins = [];
  if (isNotFalse(gifsicle)) {
    debug("gifsicle:", true);
    const opt = isBoolean(gifsicle) ? void 0 : gifsicle;
    plugins.push((0, import_imagemin_gifsicle.default)(opt));
  }
  if (isNotFalse(mozjpeg)) {
    debug("mozjpeg:", true);
    const opt = isBoolean(mozjpeg) ? void 0 : mozjpeg;
    plugins.push((0, import_imagemin_mozjpeg.default)(opt));
  }
  if (isNotFalse(pngquant)) {
    debug("pngquant:", true);
    const opt = isBoolean(pngquant) ? void 0 : pngquant;
    plugins.push((0, import_imagemin_pngquant.default)(opt));
  }
  if (isNotFalse(optipng)) {
    debug("optipng:", true);
    const opt = isBoolean(optipng) ? void 0 : optipng;
    plugins.push((0, import_imagemin_optipng.default)(opt));
  }
  if (isNotFalse(svgo)) {
    debug("svgo:", true);
    const opt = isBoolean(svgo) ? void 0 : svgo;
    plugins.push((0, import_imagemin_svgo.default)(opt));
  }
  if (isNotFalse(webp)) {
    debug("webp:", true);
    const opt = isBoolean(webp) ? void 0 : webp;
    plugins.push((0, import_imagemin_webp.default)(opt));
  }
  if (isNotFalse(jpegTran)) {
    debug("webp:", true);
    const opt = isBoolean(jpegTran) ? void 0 : jpegTran;
    plugins.push((0, import_imagemin_jpegtran.default)(opt));
  }
  return plugins;
}
var src_default = exportFn;
module.exports = exportFn;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
